name: Coco Build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          git fetch --tags
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install Just
        run: cargo install just

      - name: Build
        run: ${{matrix.ENV_VARS}} just release

      - name: Build Debug for Testing
        run: ${{matrix.ENV_VARS}} cargo build --all

      - name: Install ctags on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo snap install universal-ctags

      - name: Install ctags on macOS
        if: matrix.os == 'macOS-latest'
        run: |
          brew update
          brew install --HEAD universal-ctags/universal-ctags/universal-ctags

      - name: Install ctags on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install universal-ctags

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
      - uses: actions-rs/grcov@v0.1

      - name: Run e2e
        run: ${{matrix.ENV_VARS}} just e2e

      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}
